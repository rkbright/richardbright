<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title></title>
    <link>http://localhost:4000</link>
    <description>
      my tech blog
    </description>
    
        
            <item>
                <title>Establishing Norms for Remote Teams</title>
                <link>http://localhost:4000/establishing-norms-for-remote-teams/</link>
                <content:encoded>
                    <![CDATA[
                    <p>Remote work, the topic de jure of the month - wait, make that the topic de jure of the <strong>YEAR</strong>.</p>

<p>There are numerous articles available online that contrast the pros and cons of remote work. Some articles offer advise for how to be productive while others focus on the tools of the trade. Although those are all important factors for being successful at working remotely, this article will focus on the importance of establishing a shared set of principles and norms amongst your team for communication and collaboration.</p>

<p>Tools alone will not make you successful at remote work, they only serve to enable communication and collaboration. However, by establishing a shared framework for how to initiate communication across the team, your team will be better prepared to be successful at collaborating virtually. It will set precedence and expectations for the use of various communication media and help reduce confusion around the type of communication and acceptable response times.</p>

<p>Google published the <a href="https://liberationist.org/google-research-reveals-7-secrets-of-successful-remote-teams/" target="_blank">7 Secrets of Successful Remote Teams</a>. The article is based on a two year study that focused on key factors that make remote teams successful. Funny enough, without knowing about this research beforehand, Google lists <i>“Set clear norms for remote teams”</i> in their third bullet. If you work remotely, I recommend reading the article and thinking about how these things are being addressed (or not) by your current organization.</p>

<p>This article is primarily based on my time with the <a href="https://tech.gsa.gov/" target="_blank">GSA Office of the Chief Technology Officer (OCTO)</a>. I spent 1 year with this team with half of the time working remotely, so I’m providing dual perspectives - from in-office and remote. Let’s explore what it means to establish team norms for effective communication of remote teams. Again, there are numerous factors to consider when setting up the optimal remote environment but we will focus on team norms for effective communication and collaboration.</p>

<p><strong>Communicating to talk about….communicating? Really?</strong></p>

<p>You may find it awkward to talk about how the team will communicate, trust me, I did at first as well. Time is priceless, especially with the workload we are all juggling. You need to close a ticket. You need to finish a feature. You need to close out a user story this sprint. We’ve all heard it before, nobody has an hour this sprint to talk about how to communicate with each other. Besides, we already have email, Slack and instant messaging, so what is the point?</p>

<p>Well, the point is, just because we are all using the tools, and the tools are intuitive, it does not mean we are using them to communicate in the most efficient way. We all have a different perspective for using communication and collaboration tools that may not align with others on the team.</p>

<p>Depending on where you work, you may even experience communication fatigue where you’re having to monitor email, IMing, Slack, SalesForce, Trello/Jira, mobile text, etc… and the list goes on and on. Which do you monitor for what? How do you know you’re not missing an operationally critical message posted in an IM forum where people are also having non-work related conversation? Talk about frustrating, confusing and a waste of time. So one hour spent on establishing team norms for communication is time well spent, in my opinion. It can save you and the team hours of frustration, and even worse a work related miscue.</p>

<p><strong>There are a couple of key areas to cover:</strong></p>
<ul>
	<li>establishing <strong>communication protocols</strong> per media, and</li>
	<li>determining reasonable <strong>response times</strong></li>
</ul>

<p>Establishing a well-defined and shared <strong>communication protocol</strong> is key to setting clear expectations for how the team will communicate. Start by creating a list of all the communication tools available to your organization. Again, as mentioned earlier this could be email, IM chats, modern ChatOps tools such as <a href="https://products.office.com/en-US/microsoft-teams/group-chat-software" target="_blank">Teams</a> and <a href="https://slack.com/" target="_blank">Slack</a>, <a href="https://trello.com/" target="_blank">Trello</a> for teams running Kanban, and/or mobile devices. You’ll want to know the tools available to the organization and the ones currently in use by the team.</p>

<p>Once you have a list, collect <strong>feedback</strong> from the team. Canvas the team and solicit feedback on how team members use the tools. Context is important here to determine how each team member currently uses the enterprise tools and in what circumstances. For example, if your organization uses email, Slack, Google Chat, and Trello (for workflow), frame the feedback in a way where team members provide several specific examples for when they use each tool. If email, do they use it for work related communication, and if yes, for internal or external customers - or both? Do they only monitor email for intaking work or do they also monitor Trello and/or Slack for work related activities?</p>

<p><strong>Collaborative concurrence!</strong></p>

<p>Align and aggregate everyone’s feedback so that the team can easily understand each of the use cases per tool. This should give everybody good perspective of how his or her colleagues communicate. If you get this far, great! Now it’s time to schedule a meeting to discuss the results. There are two goals you’ll want to achieve, 1) establish <strong>shared norms</strong> for how each tool will be used, and 2) determine appropriate <strong>response times</strong> per tool.</p>

<p>Some of you might be thinking, why a meeting, can’t we do this through a shared document where team members will provide his or her input? Well, yes and no. You can get the same results through asynchronous feedback, however, a meeting (likely a virtual meeting) amongst the team where each member can be seen and heard (<strong>turn those cameras on!</strong>) is by far more personal and impactful for making team-wide decisions than just through collaborating in a shared document.</p>

<p>Be sure that everyone’s voice is heard and all opinions are considered (whether on the call or in writing). The example below should be the result of how the team wants to communicate and not based on one or two assertive team members. I know it’s hard, but pry out the opinions of those introverts - which will likely be outlined in the document, so be sure to have it open and reference it often during the discussion.</p>

<p>A simplistic example of a high-level outcome of the meeting could resemble the following.</p>

<table>
  <thead>
    <tr>
      <th>Tool</th>
      <th>Use Case</th>
      <th>Priority</th>
      <th>Expected Response Time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Email</strong></td>
      <td>informational; broadcast agency-wide comms; non-work related social communication</td>
      <td>Low</td>
      <td>Within a week</td>
    </tr>
    <tr>
      <td><strong>Slack</strong></td>
      <td>work related (hyper granular by channel and for general discussion); alerting and monitoring; person-to-person discussion</td>
      <td>Medium (depending on context)</td>
      <td>Within a few hours</td>
    </tr>
    <tr>
      <td><strong>Chat</strong></td>
      <td>person-to-person (work and personal); one-offs</td>
      <td>High</td>
      <td>Within 15 minutes to immediate</td>
    </tr>
    <tr>
      <td><strong>Trello</strong></td>
      <td>task oriented communications; work coordination</td>
      <td>Low</td>
      <td>Within the sprint; asynchronous</td>
    </tr>
    <tr>
      <td><strong>Mobile</strong></td>
      <td>work related; one-offs</td>
      <td>Emergency</td>
      <td>Immediate</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>

<p>Having such a frame work in place sets clear guidelines for how the team will communicate, covers the various circumstances, and establishes adequate response times. There is less ambiguity amongst team members and less risk of work-related priorities falling through the crack. Moreover, new team members will step into an environment where there are clear expectations and common understanding.</p>

<p>At first this may seem a little micro-management(ish), but its far from it. As a remote employee, I would appreciate having such guidelines in-place on day one. You can get up-to-speed much quicker than going with the flow.</p>

<p>I hope you found this article helpful and informative for how to help remove communication ambiguity for your team. Please feel free to send me a note via the <a href="https://richardbright.me/contact/">Contact</a> page if you have any questions.</p>

<p><strong>References:</strong></p>
<ul>
	<li><a href="https://liberationist.org/google-research-reveals-7-secrets-of-successful-remote-teams/">Google Research Reveals 7 Secrets of Successful Remote Team</a>
	</li>

</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/establishing-norms-for-remote-teams/</guid>
                <description>
                    
                    Why establishing team norms for collaboration are key to successful remote work.
                    
                </description>
                <pubDate>Fri, 17 Apr 2020 00:00:00 -0700</pubDate>
                <author>Richard Bright</author>
            </item>
        
    
        
            <item>
                <title>Exploring Jekyll for Static Sites</title>
                <link>http://localhost:4000/exploring-jekyll-for-static-sites/</link>
                <content:encoded>
                    <![CDATA[
                    <p>I have several years of experience hosting multiple <a href="https://wordpress.org/" target="_blank">Wordpress</a> websites on a personal <a href="https://stackoverflow.com/questions/10060285/what-is-a-lamp-stack" target="_blank">LAMP</a> stack server I administer from my home (I recently migrated this workload to GCP, see blog post <a href="https://richardbright.me/jekyll/pixyll/2020/04/12/Migrating-Wordpress-to-GCP/" target="_blank">Migrating Wordpress to GCP</a>). For readers unfamiliar with Wordpress, it is a great option for hosting <a href="https://en.wikipedia.org/wiki/Dynamic_web_page" target="_blank">dynamic websites</a> for a business, a personal blog, or an enterprise content management system. Wordpress is an open source platform and widely popular for it’s quick and easy setup, easy administration, and abundance of functional options (plug-ins). Figures posted by <a href="https://w3techs.com/technologies/details/cm-wordpress" target="_blank">W3Tech</a> show Wordpress powering over 35% of all websites on the internet.</p>

<p><strong>Static vs. Dynamic Website Architecture</strong>
<img src="https://richardbright.me/images/staticdynamic.png" alt="Static vs. Dynamic Website Architecture" class="img-responsive" /></p>

<p>The figure above from <a href="https://www.apachebooster.com/" target="_blank">ApacheBooster</a> visualizes the difference between a static and dynamic website architecture, Scheme A shows how web calls are served back to the requestor directly whereas Scheme B shows the additional layers/dependencies when a web call is made to a dynamic site. Each of those layers does result in additional latency, which is the time it takes before you receive a response back from the server.</p>

<p>So why <a href="https://jekyllrb.com/" target="_blank">Jekyll</a>, I was looking to move some of the content I host using Wordpress to a more lightweight platform that is responsive and easy to install and post updates. Additionally, unlike Wordpress, there is no need to update themes, plug-ins, and databases - so ideally less risk of your site getting compromised, and if it does, it’s easy enough to regenerate your blog and/or site and redeploy the build files to your hosting server. It’s pretty simple.</p>

<p>I’m not advocating for static sites over dynamic sites or vise versa, both have use cases where one would be more desirable over the other. For the remainder of this article I will walk you through how to setup a virtual hosting server where you can host one or many sites concurrently.</p>

<p><span style="color: #000000;"><strong>Server Specs:</strong> small box I have tucked away in my closet</span></p>
<ul>
<li>cpu: Intel(R) Core(TM) i7-4790 CPU @ 3.60GHz (8 cores)</li>
<li>memory: 15GiB</li>
<li>storage: 2TB</li>
<li>CentOS 7</li>
<li>Apache Web Server</li>
</ul>

<p><strong>Step 1:</strong> you will need to install the Fedora EPEL repository to get started</p>
<pre>
~]$ sudo yum update -y
~]$ sudo yum install epel-release -y
</pre>

<p><strong>Step 2:</strong> next you’ll need to install Ruby</p>
<pre>
~]$ sudo yum install ruby -y
</pre>

<p><strong>Step 3:</strong> now you will need to install Jekyll using <a href="https://jekyllrb.com/docs/ruby-101/#gems" target="_blank">gem</a>. You do not need to run this with sudo privileges</p>
<pre>
~]$ gem install jekyll 
</pre>

<p><strong>Step 4:</strong> now check you installed Ruby and Jekyll</p>
<pre>
~]$ ruby -v
~]$ jekyll -v
</pre>

<p><strong>Step 5:</strong> use gem to install the Ruby <a href="https://rubygems.org/gems/bundler" target="_blank">Bundler</a></p>
<pre>
~]$ gem install bundler
</pre>

<p>Before we generate a Jekyll package we first need to discuss where it should be created. Do you install it locally on your Linux machine and/or MacBook Pro, or how about a remote server in your house or in the cloud? Honestly, either is fine, but there are implications for how to preview the site. The less confusing strategy is to install Jekyll locally on your machine so you can view the site using http://localhost:4000/ and/or http://127.0.0.1:4000/. Jekyll has a <code>serve</code> feature that will instantiate an ephemeral version of the site using port 4000.</p>

<p>If you install the Jekyll source code on a remote server, which is not running a graphical user interface (GUI), then you will have to use the <code>--host</code> flag. The flag will allow you to view your site using a class 3 IP address (beginning with 192.168.6.73). Simply type-in the IP address followed by the port number in your browser. Please note I installed the source code on a personal remote server.</p>

<p>Okay, let’s keep going.</p>

<p><strong>Step 6:</strong> create a folder for your site and install Jekyll</p>
<pre>
~]$ mkdir mysite ; cd mysite
mysite]$ jekyll new myblog
</pre>

<p>You will need to check your firewall setting if you’re running on a remote server - Jekyll will render the ephemeral site on port 4000. You can use the following commands to check and update your local firewall, if you’re running CentOS.</p>
<pre>
~]$ sudo systemctl status firewalld ##determine if the firewall is enabled
~]$ sudo firewall-cmd --list-ports ##list ports 
Output: 10000/tcp
~]$ sudo firewall-cmd --permanent --add-port=4000/tcp ##open port 4000
Output: 10000/tcp 4000/tcp
</pre>

<p>For quick testing, you can always turn off the local firewall all together.</p>
<pre>
~]$ sudo systemctl stop firewalld 
</pre>

<p><strong>Step 7:</strong> change directories and view site using IP address of host server (I’m using an internal IP address)</p>
<pre>
~]$ cd myblog
myblog]$ jekyll server --host 192.168.6.73
</pre>

<p><strong>Picture of new Jekyll install</strong>
<img src="https://richardbright.me/images/jekyll.png" alt="New Jekyll Homesreen" class="img-responsive" /></p>

<p><strong>Step 8:</strong> now I need to push the build to the apache web server directory. If you are planning to run multiple sites you will want to create subdirectories in <code>/var/www/html</code>. For example, <code>/var/www/html/site1</code>, <code>/var/www/html/site2</code>, etc… If running a single web site, then deploy the package to <code>/var/www/html</code>.</p>
<pre>
myblog]$ jekyll build --destination /var/www/html/site1
</pre>

<p><strong>Step 9:</strong> create apache configuration file</p>
<pre>
~]$ sudo su - ##change to root user 
 # vi /etc/httpd/conf.d/site1.conf
-----
paste in the following:
#NameVirtualHost *:80
&lt;Directory /var/www/html/site1&gt;
    AllowOverride All
    Require all granted
&lt;/Directory&gt;

&lt;VirtualHost *:80&gt;
    DocumentRoot "/var/www/html/site1"
    ServerName http://site1.com
    ServerAlias site1.com
    ServerAdmin root@site1.com
    ErrorLog "/var/log/httpd/error_log_site1.com"
    CustomLog "/var/log/httpd/access_log_site1.com" combined
RewriteEngine on
RewriteCond %{SERVER_NAME} =www.site1.com [OR]
RewriteCond %{SERVER_NAME} =site1.com
RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent]
&lt;/VirtualHost&gt;

 # exit
~]$ sudo systemctl reload httpd ##restart apache server to load update 
</pre>

<p>Before you proceed to the next step you will need to ensure port forwarding is enabled on your router, if you’re using a home-based server.</p>

<p><strong>Step 10:</strong> update DNS setting with IP address</p>

<p>Access your domain registration dashboard and update the “A Record”(e.g., GoDaddy, Bluehost and HostGator).
Name: yourdomain.com
Value: ip-address</p>

<p>Updates can take anywhere from 1 minute to 20 minutes to propagate domain controllers. You can check the record of the site with the nslookup utility.</p>
<pre>gcp]$ nslookup sitename.com
##or you can watch for the update
~]$ watch -d "nslookup sitename.com"
##wait for the DNS to update before updating your ssl/tls cert</pre>

<p><strong>Step 11:<strong> apply TLS encryption using LetsEncrypt</strong></strong></p>
<pre>
sudo certbot --apache
...
Saving debug log to /var/log/letsencrypt/letsencrypt.log
Plugins selected: Authenticator apache, Installer apache
Starting new HTTPS connection (1): acme-v02.api.letsencrypt.org
Which names would you like to activate HTTPS for?
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1: site1.com
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate numbers separated by commas and/or spaces, or leave input
blank to select all options shown (Enter 'c' to cancel): 1

Cert not yet due for renewal

You have an existing certificate that has exactly the same domains or certificate name you requested and isn't close to expiry.
(ref: /etc/letsencrypt/renewal/sitename.com.conf)

What would you like to do?
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1: Attempt to reinstall this existing certificate
2: Renew &amp; replace the cert (limit ~5 per 7 days)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate number [1-2] then [enter] (press 'c' to cancel): 1

Keeping the existing certificate
Deploying Certificate to VirtualHost /etc/httpd/conf.d/site1-le-ssl.conf

Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1: No redirect - Make no further changes to the webserver configuration.
2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for
new sites, or if you're confident your site works on HTTPS. You can undo this
change by editing your web server's configuration.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate number [1-2] then [enter] (press 'c' to cancel): 2

Enhancement redirect was already set.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Congratulations! You have successfully enabled
https://site1.com

You should test your configuration at:
https://www.ssllabs.com/ssltest/analyze.html?d=sitename.com
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

IMPORTANT NOTES:
- Congratulations! Your certificate and chain have been saved at:
/etc/letsencrypt/live/site1.com/fullchain.pem
Your key file has been saved at:
/etc/letsencrypt/live/site1/privkey.pem
Your cert will expire on 2019-10-27. To obtain a new or tweaked
version of this certificate in the future, simply run certbot again
with the "certonly" option. To non-interactively renew *all* of
your certificates, run "certbot renew"
- If you like Certbot, please consider supporting our work by:

Donating to ISRG / Let's Encrypt: https://letsencrypt.org/donate
Donating to EFF: https://eff.org/donate-le
</pre>

<p>Congrats, now your site is running over TLS encryption!</p>

<p>Now you should initiate <code>git</code> in the new root directory to ensure you have adequate version control for your source code. You’ll want to log into your <a href="https://github.com/" target="_blank">github</a> account and create a public or private repo. Ensure your ssh key is added so you can push your code from the terminal.</p>
<pre>
myblog]$ git config --global user.name "name"  
myblog]$ git config --global user.email "email address"
myblog]$ git init
myblog]$ git add .
myblog]$ git commit -m "message"
myblog]$ git remote add origin git@github.com:"username"/"site1"
myblog]$ git push -u origin master
</pre>

<p>Now toggle back to your github account, you should see the source code for your site.</p>

<p>That should do it, I hope you found this post informative and helpful to you on your journey to host your own website, whether using Wordpress or Jekyll.</p>

<hr />

<p><strong>References:</strong></p>
<ul>
        <li><a href="https://wordpress.org/">https://wordpress.org/</a></li>
	<li><a href="https://stackoverflow.com/questions/10060285/what-is-a-lamp-stack">https://stackoverflow.com/questions/10060285/what-is-a-lamp-stack</a></li>
	<li><a href="https://richardbright.me/jekyll/pixyll/2020/04/12/Migrating-Wordpress-to-GCP/">https://richardbright.me/jekyll/pixyll/2020/04/12/Migrating-Wordpress-to-GCP/</a></li>
	<li><a href="https://en.wikipedia.org/wiki/Dynamic_web_page">https://en.wikipedia.org/wiki/Dynamic_web_page</a></li> 
	<li><a href="https://w3techs.com/technologies/details/cm-wordpress">https://w3techs.com/technologies/details/cm-wordpress</a></li>
	<li><a href="https://jekyllrb.com/">https://jekyllrb.com/</a></li>
	<li><a href="https://apachebooster.com/blog/cache-static-and-dynamic-content-for-website/staticdynamic/">https://apachebooster.com/blog/cache-static-and-dynamic-content-for-website/staticdynamic/</a></li> 
	<li><a href="https://jekyllrb.com/docs/ruby-101/#gems">https://jekyllrb.com/docs/ruby-101/#gems</a></li>
</ul>

<hr />

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/exploring-jekyll-for-static-sites/</guid>
                <description>
                    
                    How to host multiple static websites using Jekyll and Apache.
                    
                </description>
                <pubDate>Mon, 13 Apr 2020 23:28:00 -0700</pubDate>
                <author>Richard Bright</author>
            </item>
        
    
        
            <item>
                <title>Migrating Wordpress to GCP</title>
                <link>http://localhost:4000/migrating-wordpress-to-gcp/</link>
                <content:encoded>
                    <![CDATA[
                    <p>I recently migrated my shared hosting WordPress platform from a dedicated server I was administering in the basement of my home (my personal on prem server farm) to Google Cloud Platform (GCP). Why GCP? I have several years of experience in Amazon Web Services (AWS) and could have easily replicated the process using their specialized services, but my decision to align with GCP was driven by my interest in exploring other cloud platforms as a means to broaden my experience. The<a href="https://cloud.google.com/free/#always-free" target="_blank" rel="noopener"> $<span style="text-decoration: underline;">300 account credit</span></a> also contributed in the decision making process! Thanks Google!</p>

<p>With infrastructure, storage and networking out of the way, I then focused on the migration strategy. I researched several blogs and professional service companies to determine the best strategy (hmm, I really mean the easiest strategy). I mostly found solutions needing plug ins, and, in many cases, a subscription for premium services. Not that there is anything wrong with premium services, I think it’s great that open source software is helping drive innovation, collaboration and prosperity, but for my use case, I was looking for a cheap (meaning free) and easy way to migrate my shared hosting platform to GCP.</p>

<p><strong>NOTE:</strong> The <span style="text-decoration: underline;"><a href="https://wordpress.org/" target="_blank" rel="noopener">WordPress.or</a><a href="https://wordpress.org/" target="_blank" rel="noopener">g</a></span> website has real helpful resources to reference to better understand common issues and questions. I strongly recommend anyone working with WordPress to create an account. There are hundreds of posts and threads you can review; you can even start your own topic(s) and post questions. Thanks <span style="text-decoration: underline;"><a href="https://wordpress.org/support/users/gappiah/" target="_blank" rel="noopener">@gappiah</a> </span>for your help!</p>

<p>In the end, I went with what I know, the command line. The process I outline may not work for the broadest of use cases or be the most efficient (please go easy on me), but it got the job done!  All of the websites I support are now running 100% in GCP!</p>

<p>You will need to create a GCP account to take advantage of the $300 credit. If you’re reading this a few months/years from now (8/2019) - YES, Google credited new customers with $300!  You have to enter your credit card information, but don’t worry, charges will not accrue until you exhaust the credited amount. Once you have an account, you will need to create a <span style="text-decoration: underline;"><a href="https://cloud.google.com/gcp/getting-started/" target="_blank" rel="noopener">GCP project</a></span>. A project forms the basis for creating, enabling and using all GCP services including managing APIs, enabling billing, adding and removing collaborators, and managing permissions for GCP resources.<br />
<br /><strong>NOTE:</strong> Google has a marketplace WordPress offering with a baked in <span style="text-decoration: underline;"><a href="https://en.wikipedia.org/wiki/LAMP_(software_bundle)" target="_blank" rel="noopener">LAMP stack</a></span> (Linux, Apache, MySQL | MariaDB, &amp; PHP); however, I chose to start from a fresh image and configure everything myself - basically replicating my existing server configurations.  This may also be a good time to consider upgrading to PHP 7.* once you’ve migrated: 1) your server-side configurations, 2) ported your platform,  and 3) tested functionality on the older PHP version. You can run the following commands in the PHP section below if you’re running an older version. You can test PHP version compatibility with your site(s) themes and plugins with tools such as <a href="https://wpengine.com/solution-center/php-compatibility-checker/" target="_blank" rel="noopener"><strong><span style="text-decoration: underline;">PHP Compatibility Checker</span></strong></a>. You can run through multiple iterations and test each PHP 7.* version to determine how upgrading to a newer version will affect your site(s).</p>

<p><strong>Installing the LAMP Stack</strong></p>

<p><strong>Linux: </strong>Choose a distribution to run your hosting platform (e.g., refer to my “<span style="text-decoration: underline;"><a href="https://operationitops.com/what-is-linux-anyway-a-quick-overview-of-distributions/" target="_blank" rel="noopener">What is Linux anyway? A quick overview of distributions.</a></span>”) Post. Two of the most common operating systems for hosting WordPress is Ubuntu and/or CentOS - but generally, any Linux server-based distribution should work. Just be sure to select a distribution that has a large community of support.</p>

<p><strong>Apache:</strong></p>
<pre>##install apache
~]$ sudo yum install httpd ## install apache
~]$ sudo systemctl start httpd.service
~]$ sudo systemctl enable httpd.service ## start on boot</pre>
<p><strong>MariaDB:</strong></p>
<pre>##install mariadb
~]$ sudo yum install mariadb-server mariadb
~]$ sudo systemctl start mariadb
~]$ sudo mysql_secure_installation ##remove some dangerous defaults and lock down access
##
#Set root password? [Y/n] Y
#New password: <strong>Enter your password here</strong>
#Re-enter new password: <strong>repeat your password</strong>d
#Remove anonymous users? [Y/n] Y
#Disallow root login remotely? [Y/n] Y
#Remove test database and access to it? [Y/n] Y
#Reload privilege tables now? [Y/n] Y
##
~]$ sudo systemctl enable mariadb.service ## start on boot</pre>
<p><strong>PHP:</strong></p>
<pre><span style="color: #000000;">##Install php 7.*
~]$ sudo yum -y install http://rpms.remirepo.net/enterprise/remi-release-7.rpm</span>
~]$ sudo yum -y install epel-release yum-utils
~]$ php -v ##get version for next command
~]$ sudo yum-config-manager --disable remi-php## ##only needed if you're running an older version
~]$ sudo yum-config-manager --enable remi-php73## install php 7
~]$ sudo yum -y install php php-cli php-fpm php-mysqlnd php-zip php-devel php-gd php-mcrypt php-mbstring php-curl php-xml php-pear php-bcmath php-json
~]$ php -v ## check version
~]$ sudo systemctl restart httpd.service ## restart apache server</pre>
<p><strong><span style="color: #000000;">Other Considerations:</span></strong></p>
<pre>## Configure firewalld - open local ports for http(80) &amp; https(443) traffic
~]$ sudo firewall-cmd --permanent --zone=public --add-service=http 
~]$ sudo firewall-cmd --permanent --zone=public --add-service=https
~]$ sudo firewall-cmd --reload

## lock down ssh configuration
~]$ sudo vi /etc/ssh/sshd_config
## add line at the bottom of file
...
AllowUsers name1 name2 name3 ## will lock down who can ssh into the system
## also check that the following options
...
PermitRootLogin no
PasswordAuthentication no
GSSAPIAuthentication yes ##for secure ssh-based authentication

</pre>
<p><span style="color: #000000;">Okay, with LAMP installed, we are ready to begin the process of migrating your hosting platform to GCP. Below details my hosting platform configuration to help you better understand the source environment. </span></p>

<p><span style="color: #000000;"><strong>Source Environment:</strong> </span></p>
<ul>
 	<li style="list-style-type: none;">
<ul>
 	<li>Internet Service Provider (ISP): Verizon Static IP - was not on residential DHCP account</li>
 	<li>Did not use a Verizon provided router; I had CAT5 installed from the modem to the router. Verizon may give you a hard time....just be persistent, they will get it done. I had this done for the residential line as well. Resulted in much better throughput when uploading/downloading local files within your LAN.</li>
 	<li>Router: <a href="https://www.netgear.com/landings/nighthawk/" target="_blank" rel="noopener">Nighthawk® X6S Tri-Band WiFi Router With MU-MIMO</a></li>
 	<li>Server Specs
<ul>
 	<li>cpu: Intel(R) Core(TM) i7-4790 CPU @ 3.60GHz (8 cores)</li>
 	<li>memory: 15GiB</li>
 	<li>storage: 2TB</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><b>Additional Prerequisite Tasks</b></p>

<p>Log into your site and run all updates and make sure you’re on the latest version of WordPress. Please note WordPress version 5.2.2 is not compatible with PHP 5.4, you will need to upgrade to PHP 5.6 for your site to render correctly. You will need access to your host terminal to complete the remaining tasks. The steps outlined below assumes only one (1) site is being migrated. If you run multiple sites, you can either repeat the steps per site or apply the tar file and database backup to all sites and databases – this approach may take a while to transfer all of the data from source to host.</p>

<p><strong>Access Your Current Hosting Terminal</strong></p>

<p>Make backups of all source files and databases in the unfortunate (but all likely) event you have to roll back. You will absolutely be relieved if you did and terrified if you didn’t.</p>
<pre>~]$ sudo cp -rpv /var/www/html /home/user/backup/
~]$ mysqldump -u root -p --all-databases &gt; wp-databases.sql
    Enter password:</pre>
<p><b>Create a Working Directory to Collocate and Save Files</b></p>
<pre>~]$ mkdir gcp
~]$ cd gcp</pre>
<p><strong>Create a tar File of (or all) WordPress site(s)</strong></p>
<pre>gcp]$ sudo tar -cvzf sitename.tar /var/www/html/sitename
##use ..html/ if copying all sites 
##then update file permissions
gcp]$ sudo chown user.user sitename.tar</pre>
<p><strong>Get Database Information and Create Database File</strong></p>
<pre>gcp]$ cat /var/www/html/sitename/wp-config.php | grep DB
...
define('DB_NAME', 'database_name');
define('DB_USER', 'database_user');
define('DB_PASSWORD', 'password');
define('DB_HOST', 'localhost');
define('DB_CHARSET', 'utf8');
define('DB_COLLATE', '');
...
##generate database file for one or all databases
##for all databases add the --all-databases option in place of the database_name
gcp]$ mysqldump -u root -p database_name &gt; database_name-date.sql</pre>
<p><strong>Copy Your Apache Configuration File</strong></p>
<pre>gcp]$ sudo cp -rpv /etc/httpd/conf.d/sitename.conf .</pre>
<p><strong>NOTE: </strong>You should now have three files in your gcp working directory</p>
<pre>gcp]$ ls
...
sitename.conf database_name-date.sql sitename.tar</pre>
<p>The next step assumes you already propagated your public keys between the source and target environments. If you’re using a laptop as an intermediary between the environments, you can pull the files down from the source and then push to your target. A direct connection is likely the quickest and most efficient path and the one I recommend.</p>

<p><strong>Sync Your Files</strong></p>
<pre>##pull method from target
##ssh into gcp server
~]$ mkdir gcp
~]$ cd gcp 
gcp]$ rsync -avzh user@source-ip-address:/home/user/gcp/sitename.tar .
##repeat for all files or use ..gcp/* to copy all files</pre>
<pre>##push method from source
##ssh into source server
##be sure to create the gcp working directory in the target server before running
gcp]$ rsync -avzh sitename.tar user@target-ip-address:/home/user/gcp
##repeat for all files or . to copy all files</pre>

<p><strong>Untar Files into the Default root Folder for the Web Server </strong></p>
<pre>gcp]$ sudo tar -xvf sitename.tar -C /var/www/html/
##change ownership to apache user and group
gcp]$ sudo chown -Rv apache.apache /var/www/html/sitename
##if more than one site use path /var/www/htlm/</pre>
<p><strong>Create Database, User and Load Database File(s)</strong></p>
<pre>create database - use the same database name, user account and password from source
gcp]$ mysql -u root -p
Enter password:
MariaDB [(none)]&gt;CREATE DATABASE database_name;
MariaDB [(none)]&gt;GRANT ALL PRIVILEGES on database_name.* to 'database_user'@'localhost' identified by 'password';
MariaDB [(none)]&gt;FLUSH PRIVILEGES;
MariaDB [(none)]&gt;EXIT;
##load the data file
gcp]$ cat database_name-date.sql | mysql -u root -p database_name</pre>

<p><strong>Move apache configuration file </strong></p>
<pre>gcp]$ sudo mv sitename.conf /etc/httpd/conf.d/
##change ownership to root
gcp]$ sudo chown root.root /etc/httpd/conf.d/sitename.conf</pre>
<p><strong>Update SELinux Setting so apache can Write Updates</strong></p>
<pre>gcp]$ sudo chcon -t httpd_sys_rw_content_t /var/www/html/sitename -R</pre>
<p><strong>Update DNS Setting with New IP Address</strong></p>

<p>Access your domain registration dashboard and update the “A Record”(e.g., GoDaddy, Bluehost and HostGator).
Name: yourdomain.com
Value: ip-address</p>

<p>Updates can take anywhere from 1 minute to 20 minutes to propagate domain controllers. You can check the record of the site with the nslookup utility.</p>
<pre>gcp]$ nslookup sitename.com
##or you can watch for the update 
gcp]$ watch -d "nslookup sitename.com"
##wait for the DNS to update before updating your ssl/tls cert</pre>
<p><strong>Update Your Certs if Using SSL/TLS</strong></p>
<pre>I use <a href="https://letsencrypt.org/" target="_blank" rel="noopener">Lets Encrypt</a> for CA
gcp]$ sudo certbot --apache
...
Saving debug log to /var/log/letsencrypt/letsencrypt.log
Plugins selected: Authenticator apache, Installer apache
Starting new HTTPS connection (1): acme-v02.api.letsencrypt.org
Which names would you like to activate HTTPS for?
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1: sitename.com
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate numbers separated by commas and/or spaces, or leave input
blank to select all options shown (Enter 'c' to cancel): <strong>1</strong>

Cert not yet due for renewal

You have an existing certificate that has exactly the same domains or certificate name you requested and isn't close to expiry.
(ref: /etc/letsencrypt/renewal/sitename.com.conf)

What would you like to do?
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1: Attempt to reinstall this existing certificate
2: Renew &amp; replace the cert (limit ~5 per 7 days)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate number [1-2] then [enter] (press 'c' to cancel): <strong>1</strong>

Keeping the existing certificate
Deploying Certificate to VirtualHost /etc/httpd/conf.d/wordpress3-le-ssl.conf

Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1: No redirect - Make no further changes to the webserver configuration.
2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for
new sites, or if you're confident your site works on HTTPS. You can undo this
change by editing your web server's configuration.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate number [1-2] then [enter] (press 'c' to cancel): <strong>2</strong>

Enhancement redirect was already set.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Congratulations! You have successfully enabled
https://sitename.com

You should test your configuration at:
https://www.ssllabs.com/ssltest/analyze.html?d=sitename.com
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

IMPORTANT NOTES:
- Congratulations! Your certificate and chain have been saved at:
/etc/letsencrypt/live/sitename.com/fullchain.pem
Your key file has been saved at:
/etc/letsencrypt/live/sitename/privkey.pem
Your cert will expire on 2019-10-27. To obtain a new or tweaked
version of this certificate in the future, simply run certbot again
with the "certonly" option. To non-interactively renew *all* of
your certificates, run "certbot renew"
- If you like Certbot, please consider supporting our work by:

Donating to ISRG / Let's Encrypt: https://letsencrypt.org/donate
Donating to EFF: https://eff.org/donate-le
</pre>
<p><strong>OPTIONAL: Setup a cron Job to Auto Renew the Cert Every 90 Days</strong></p>
<pre>##create folder to capture logs
~]$ mkdir -p crojobs/sslUpdateLog ##cron also captures data in /var/log/cron
~]# vi /usr/bin/sslUpdate.sh
...
##paste below into file
#!/bin/bash

# Define a timestamp function
today=`date '+%Y_%m_%d__%H_%M_%S'`

certbot renew &gt; /home/user/crojobs/sslUpdateLog/sslUpdateLog_$today.txt</pre>

<p><strong>Update crontab</strong></p>
<pre>~]$ sudo crontab -e
...
##add entry into crontab
55 11 * 1/3 * /usr/bin/sslDaily.sh #update ssl certs</pre>

<p>Okay, all your websites should be pointed to your new hosting platform in GCP (or platform of choice). I hope you found this article useful and informative in helping you to successfully migrate your hosting platform. Please feel free to send me a comment through my contact page if you have any questions.</p>

<p><b>References:</b></p>
<ul>
 	<li><a href="https://cloud.google.com/free/#always-free">https://cloud.google.com/free/#always-free</a></li>
 	<li><a href="https://wordpress.org/support/users/gappiah/">https://wordpress.org</a></li>
 	<li> <a href="https://wordpress.org/support/users/gappiah/">https://wordpress.org/support/users/gappiah/</a></li>
 	<li><a href="https://en.wikipedia.org/wiki/LAMP_(software_bundle)">https://en.wikipedia.org/wiki/LAMP_(software_bundle)</a></li>
 	<li><a href="https://cloud.google.com/gcp/getting-started/" target="_blank" rel="noopener">https://cloud.google.com/gcp/getting-started/</a></li>
 	<li><a href="https://wpengine.com/solution-center/php-compatibility-checker/" target="_blank" rel="noopener">https://wpengine.com/solution-center/php-compatibility-checker/</a></li>
 	<li><a href="https://letsencrypt.org/" target="_blank" rel="noopener">https://letsencrypt.org/</a></li>
</ul>

<hr />

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/migrating-wordpress-to-gcp/</guid>
                <description>
                    
                    Summary of how to move your Wordpress workload to a GCP virtual machine. The article does not show you how to set up an instance in GCP but it does walk you through the process of installing a LAMP stack, how to sync your files, and how to install SSL certs using LetsEncrypt. Happy reading everyone!
                    
                </description>
                <pubDate>Sun, 12 Apr 2020 00:00:00 -0700</pubDate>
                <author>Richard Bright</author>
            </item>
        
    
        
            <item>
                <title>What is Linux anyway? A quick overview of distributions</title>
                <link>http://localhost:4000/what-is-linux-anyway-a-quick-overview-of-distributions/</link>
                <content:encoded>
                    <![CDATA[
                    <p><span style="color: #000000;">So, what exactly is Linux anyway? <span style="color: #003366;"><a style="background-color: #ffffff; color: #003366; text-decoration: underline;" href="https://medium.freecodecamp.org/i-switched-from-windows-to-linux-here-are-the-lessons-i-learned-along-the-way-434da84ab63f" target="_blank" rel="noopener">Is it a desktop environment</a></span>?<span style="text-decoration: underline; color: #003366;"><a style="background-color: #ffffff; color: #003366; text-decoration: underline;" href="https://blog.heroix.com/blog/linux-vs-windows-a-cost-comparison" target="_blank" rel="noopener"> Is it used to manage applications in many of the companies for which we work</a></span>? <span style="text-decoration: underline; color: #003366;"><a style="background-color: #ffffff; color: #003366; text-decoration: underline;" href="https://www.zdnet.com/article/linux-foundation-finds-enterprise-linux-growing-at-windows-expense/" target="_blank" rel="noopener">Does it serve up web pages on the internet</a></span>?<span style="text-decoration: underline;"><span style="color: #003366; text-decoration: underline;"> <a style="background-color: #ffffff; color: #003366; text-decoration: underline;" href="https://www.autoblog.com/2014/04/12/tesla-model-s-owners-hack-their-cars-find-ubuntu/" target="_blank" rel="noopener">How are self driving cars able to, well, “drive”?</a></span></span> <span style="text-decoration: underline; color: #003366;">W<a style="background-color: #ffffff; color: #003366; text-decoration: underline;" href="https://mybroadband.co.za/news/software/243342-most-popular-operating-systems-for-pcs-and-smartphones.html" target="_blank" rel="noopener">here does Android come in</a>, </span><a style="color: #000000;" href="https://www.unixmen.com/15-weirdsurprising-devices-amp-systems-that-run-on-linux/" target="_blank" rel="noopener"><span style="text-decoration: underline; color: #003366;">and what does my home appliances have to do with Linux</span>?</a> </span></p>

<p><span style="color: #000000;">Linux is one of the leading operating systems (OS) that is powering everything from precision medical equipment in hospitals, embedded systems in your vehicle, to the incredibly convenient entertainment services provided by <a style="color: #000000;" href="https://www.techhive.com/article/2158040/how-netflix-streams-movies-to-your-tv.html" target="_blank" rel="noopener"><span style="text-decoration: underline; color: #003366;">Netflix</span></a>. Linux is everywhere, whether you see it in plain sight or through the many online and connected services we enjoy today - the average person cannot go a day or two without using a device, service or capability that is not in some way supported by Linux (well, maybe you can, but I would find it difficult, especially if you operate a relatively modern car and have at least one <span style="text-decoration: underline;"><span style="color: #003366;"><a style="color: #003366; text-decoration: underline;" href="https://www.tldp.org/HOWTO/Adv-Routing-HOWTO/" target="_blank" rel="noopener">stoplight</a></span></span> in your town).</span></p>

<p><span style="color: #000000;">To answer the first question posed in the blog title, in simple terms, Linux is an OS that sits between the physical hardware and the software applications that are available and/or supported on the system. For example, if running Linux as a desktop, Linux manages the communication between your persistent storage device(s), i.e., SSD, HDD, etc…, and your desktop graphical user interface. If on a Windows OS then this is the same as saving files in one of your letter drives, i.e., C:, D:, etc… It allows connection to the internet through a physical port, such as an either port, or through WIFI. Linux is the glue that makes the underneath hardware available to the user. </span></p>

<p><span style="color: #000000;">Linux is written in C and is considered a mid-level language. A mid-level language get its name because it provides both system programming capabilities (low-level computing functions) as well as application programming (front-end functions such as web application and user interfaces). To provide more context, high-level languages are those most commonly heard of today, for example: </span></p>
<ul>
 	<li><span style="color: #000000;">Java, C#, Python, Ruby, Go, and Lua, just to name several, </span></li>
 	<li><span style="color: #000000;">a couple of mid-level languages include C and C++, and </span></li>
 	<li><span style="color: #000000;">assembler is an example of a low-level / machine language.  </span></li>
</ul>
<p><span style="color: #000000;">What are distributions (distros) in the context of Linux? Well, to understand this question you have to familiarize yourself with the nature of free and open source software (FOSS / OSS). I won’t get into the differences of the various types of OSS licenses, for more information you can read more <a style="color: #000000;" href="https://choosealicense.com/licenses/" target="_blank" rel="noopener"><span style="text-decoration: underline; color: #003366;">here</span></a>, but in general, OSS allows a user to customize and modify the code that comprises the system / application you’re supporting. Hence, you can strip the applications and tools available on an OS down to the bare essentials needed to support an application. This will reduce the amount of software needing to be patched each month, reduce the surface space for hackers to launch possible attacks, and reduce the image size. </span></p>

<p><span style="color: #000000;">This flexibility was the driving force behind customized Linux distributions. There are dozens of distributions available that support a broad myriad of functions. Below is a list and brief description of the most used Linux distributions, according to <a style="color: #000000;" href="https://distrowatch.com/dwres.php?resource=major" target="_blank" rel="noopener"><span style="text-decoration: underline; color: #003366;">DistoWatch</span></a> (definitions provided by DistroWatch as well). </span></p>

<p><strong><span style="color: #000000;">Popular Distros:</span></strong></p>
<ul>
 	<li><span style="color: #000000;"><strong><span style="text-decoration: underline; color: #003366;"><a style="color: #003366; text-decoration: underline;" href="https://linuxmint.com/">Linux Mint</a> </span>- </strong>  Linux Mint is an Ubuntu-based distribution whose goal is to provide a classic desktop experience with many convenient, custom tools and optional out-of-the-box multimedia support. It also adds a custom desktop and menus, several unique configuration tools, and a web-based package installation interface. Linux Mint is compatible with Ubuntu software repositories.</span></li>
</ul>
<ul>
 	<li><span style="color: #000000;"><b><span style="text-decoration: underline; color: #003366;"><a style="color: #003366; text-decoration: underline;" href="https://www.ubuntu.com/">Ubuntu</a></span> -</b> Ubuntu is a complete desktop Linux operating system, freely available with both community and professional support. The Ubuntu community is built on the ideas enshrined in the Ubuntu Manifesto: that software should be available free of charge, that software tools should be usable by people in their local language and despite any disabilities, and that people should have the freedom to customize and alter their software in whatever way they see fit. "Ubuntu" is an ancient African word, meaning "humanity to others". The Ubuntu distribution brings the spirit of Ubuntu to the software world. </span></li>
</ul>
<ul>
 	<li><span style="color: #000000;"><strong><span style="text-decoration: underline; color: #003366;"><a style="color: #003366; text-decoration: underline;" href="https://www.archlinux.org/">Arch Linux</a></span> -</strong> Arch Linux is an independently developed, x86_64-optimized Linux distribution targeted at competent Linux users. It uses 'pacman', its home-grown package manager, to provide updates to the latest software applications with full dependency tracking. Operating on a rolling release system, Arch can be installed from a CD image or via an FTP server. The default install provides a solid base that enables users to create a custom installation. In addition, the Arch Build System (ABS) provides a way to easily build new packages, modify the configuration of stock packages, and share these packages with other users via the Arch Linux user repository. </span></li>
</ul>
<ul>
 	<li><span style="color: #000000;"><span style="text-decoration: underline; color: #003366;"><a style="color: #003366;" href="https://www.debian.org/"><b>Debian</b></a></span><b style="color: #000000;"> - </b><span style="color: #000000;">The Debian Project is an association of individuals who have made common cause to create a free operating system. This operating system is called Debian. Debian systems currently use the Linux kernel. Linux is a completely free piece of software started by Linus Torvalds and supported by thousands of programmers worldwide. Of course, the thing that people want is application software: programs to help them get what they want to do done, from editing documents to running a business to playing games to writing more software. Debian comes with over 50,000 packages (pre-compiled software that is bundled up in a nice format for easy installation on your machine) - all of it free. It's a bit like a tower. At the base is the kernel. On top of that are all the basic tools. Next is all the software that you run on the computer. At the top of the tower is Debian -- carefully organizing and fitting everything so it all works together. </span></span></li>
</ul>
<ul>
 	<li><span style="color: #000000;"><b><span style="color: #003366;"><a style="color: #003366;" href="https://start.fedoraproject.org/"><span style="text-decoration: underline;">Fedora</span></a></span> - </b>Fedora (formerly Fedora Core) is a Linux distribution developed by the community-supported Fedora Project and owned by Red Hat. Fedora contains software distributed under a free and open-source license and aims to be on the leading edge of such technologies. Fedora has a reputation for focusing on innovation, integrating new technologies early on and working closely with upstream Linux communities. The default desktop in Fedora is the GNOME desktop environment and the default interface is the GNOME Shell. Other desktop environments, including KDE, Xfce, LXDE, MATE and Cinnamon, are available. Fedora Project also distributes custom variations of Fedora called Fedora spins. These are built with specific sets of software packages, offering alternative desktop environments or targeting specific interests such as gaming, security, design, scientific computing and robotics. </span></li>
</ul>
<ul>
 	<li><span style="color: #000000;"><b><span style="color: #003366;"><a style="color: #003366;" href="https://www.opensuse.org/"><span style="text-decoration: underline;">openSUSE</span></a></span> - </b>The openSUSE project is a community program sponsored by SUSE Linux and other companies. Promoting the use of Linux everywhere, this program provides free, easy access to openSUSE, a complete Linux distribution. The openSUSE project has three main goals: make openSUSE the easiest Linux for anyone to obtain and the most widely used Linux distribution; leverage open source collaboration to make openSUSE the world's most usable Linux distribution and desktop environment for new and experienced Linux users; dramatically simplify and open the development and packaging processes to make openSUSE the platform of choice for Linux developers and software vendors.</span></li>
</ul>
<ul>
 	<li><span style="color: #000000;"> <b><span style="color: #003366;"><a style="color: #003366;" href="https://www.freebsd.org/"><span style="text-decoration: underline;">FreeBSD</span></a></span> - </b>FreeBSD is a UNIX-like operating system for the i386, amd64, IA-64, arm, MIPS, powerpc, ppc64, PC-98 and UltraSPARC platforms based on U.C. Berkeley's "4.4BSD-Lite" release, with some "4.4BSD-Lite2" enhancements. It is also based indirectly on William Jolitz's port of U.C. Berkeley's "Net/2" to the i386, known as "386BSD", though very little of the 386BSD code remains. FreeBSD is used by companies, Internet Service Providers, researchers, computer professionals, students and home users all over the world in their work, education and recreation. FreeBSD comes with over 20,000 packages (pre-compiled software that is bundled for easy installation), covering a wide range of areas: from server software, databases and web servers, to desktop software, games, web browsers and business software - all free and easy to install. </span></li>
</ul>
<ul>
 	<li><span style="color: #000000;"><b><span style="text-decoration: underline; color: #003366;">CentOS</span> - </b>CentOS as a group is a community of open source contributors and users. Typical CentOS users are organizations and individuals that do not need strong commercial support in order to achieve successful operation. CentOS is 100% compatible rebuild of the Red Hat Enterprise Linux, in full compliance with Red Hat's redistribution requirements. CentOS is for people who need an enterprise class operating system stability without the cost of certification and support.</span></li>
</ul>
<ul>
 	<li><span style="color: #000000;"><b><span style="color: #003366;"><a style="color: #003366;" href="https://www.redhat.com/en"><span style="text-decoration: underline;">Redhat</span></a></span> - </b>Red Hat Enterprise Linux (RHEL) is a Linux distribution developed by Red Hat and targeted toward the commercial market. Red Hat Enterprise Linux is released in server editions for x86, x86_64, Itanium, PowerPC and IBM System z architectures, and desktop editions for x86 and x86_64 processors. All of Red Hat's official support and training and the Red Hat Certification Program centers around the Red Hat Enterprise Linux platform. Red Hat uses strict trademark rules to restrict free re-distribution of its officially supported versions of Red Hat Enterprise Linux, but still freely provides its source code. Third-party derivatives can be built and redistributed by stripping away non-free components.</span></li>
</ul>

<p><img src="https://richardbright.me/images/mint.png" alt="Linux Mint" class="img-responsive" />
<img src="https://richardbright.me/images/ubuntu.png" alt="Ubuntu" class="img-responsive" />
<img src="https://richardbright.me/images/arch.png" alt="Arch" class="img-responsive" />
<img src="https://richardbright.me/images/debian.png" alt="Debian" class="img-responsive" />
<img src="https://richardbright.me/images/fedora.png" alt="Fedora" class="img-responsive" />
<img src="https://richardbright.me/images/suse.png" alt="Susue" class="img-responsive" />
<img src="https://richardbright.me/images/freebsd.png" alt="FreeBSD" class="img-responsive" />
<img src="https://richardbright.me/images/centos.png" alt="CentOS" class="img-responsive" />
<img src="https://richardbright.me/images/redhat.png" alt="redhat" class="img-responsive" />
<img src="https://richardbright.me/images/elementary.png" alt="elementaryOS" class="img-responsive" /></p>

<!--<img src="image/mint.png" alt="Linux Mint picture">-->

<p>The distros identified above only represent a proportion of the available Linux distributions available on the market. Because of the flexibility of OSS, each distribution provides a customized and unique experience tailored for your specific needs. Upfront research will help with narrowing the disto of choice and ensuring the highest level of maintainability of your system and supported applications. Linux distros are largely free and available for download online or through the distro’s website.</p>

<p>Why is learning Linux important? In traditional software development there are ops folks, security folks and application developers. ops folks are responsible for infrastructure and performance duties that are usually measured by several of the software <em><span style="text-decoration: underline;"><span style="color: #003366;"><a style="color: #003366; text-decoration: underline;" href="http://codesqueeze.com/the-7-software-ilities-you-need-to-know/">ilities</a></span></span>. </em>The recent emergence of cloud infrastructure, configuration, automation and scaleable tools has brought more focus and emphasis on traditional system administrator (sysadmin) duties. Now, the once sysadmin of on-prem (data center ops) resources is now able  to orchestrate a myriad of duties and responsibilities in the cloud. Not only do sysadmins maintain the OS, but they are now orchestrating the full delivery pipeline for developers, from configuration management using Jenkins, Chef, Puppet, or Ansible, to managing containers in docker and pod orchestration through kubernetes - these folks are administering a full platform of capabilities that is helping to drive software development toward a more repeatable, maintainable, available, extensible and stable process, and not to mention it is a lot of fun! I can’t wait to see what’s next in store for the sysadmin / platform engineer.
<br />
<br />
<b>References:</b></p>
<ul>
 	<li><a href="https://www.linux.com/what-is-linux">https://www.linux.com/what-is-linux</a></li>
 	<li><a href="https://distrowatch.com/dwres.php?resource=major">https://distrowatch.com/dwres.php?resource=major</a></li>
 	<li><a href="https://choosealicense.com/licenses/">https://choosealicense.com/licenses/</a></li>
 	<li><a href="https://www.tldp.org/HOWTO/Adv-Routing-HOWTO/">https://www.tldp.org/HOWTO/Adv-Routing-HOWTO/</a></li>
 	<li><a href="https://www.techhive.com/article/2158040/how-netflix-streams-movies-to-your-tv.html">https://www.techhive.com/article/2158040/how-netflix-streams-movies-to-your-tv.html</a></li>
 	<li><a href="https://www.autoblog.com/2014/04/12/tesla-model-s-owners-hack-their-cars-find-ubuntu/">https://www.autoblog.com/2014/04/12/tesla-model-s-owners-hack-their-cars-find-ubuntu/</a></li>
 	<li><a href="https://www.unixmen.com/15-weirdsurprising-devices-amp-systems-that-run-on-linux/">https://www.unixmen.com/15-weirdsurprising-devices-amp-systems-that-run-on-linux/</a></li>
 	<li><a href="https://mybroadband.co.za/news/software/243342-most-popular-operating-systems-for-pcs-and-smartphones.html">https://mybroadband.co.za/news/software/243342-most-popular-operating-systems-for-pcs-and-smartphones.html</a></li>
 	<li><a href="https://www.zdnet.com/article/linux-foundation-finds-enterprise-linux-growing-at-windows-expense/">https://www.zdnet.com/article/linux-foundation-finds-enterprise-linux-growing-at-windows-expense/</a></li>
 	<li><a href="https://blog.heroix.com/blog/linux-vs-windows-a-cost-comparison">https://blog.heroix.com/blog/linux-vs-windows-a-cost-comparison</a></li>
 	<li><a href="https://medium.freecodecamp.org/i-switched-from-windows-to-linux-here-are-the-lessons-i-learned-along-the-way-434da84ab63f">https://medium.freecodecamp.org/i-switched-from-windows-to-linux-here-are-the-lessons-i-learned-along-the-way-434da84ab63f</a></li>
 	<li><a href="http://codesqueeze.com/the-7-software-ilities-you-need-to-know/">http://codesqueeze.com/the-7-software-ilities-you-need-to-know/</a></li>
 	<li><a href="https://www.allconnect.com/blog/how-netflix-streaming-recommendations-work" target="_blank" rel="noopener">https://www.allconnect.com/blog/how-netflix-streaming-recommendations-work</a></li>
</ul>

<hr />

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/what-is-linux-anyway-a-quick-overview-of-distributions/</guid>
                <description>
                    
                    This is a broad overview of various Linux distributions available for running workloads for major Fortune 500 companies, embedded systems and devices, to our own personal media servers running in the cloud or under your basement steps. Enjoy!
                    
                </description>
                <pubDate>Wed, 01 Apr 2020 00:00:00 -0700</pubDate>
                <author>Richard Bright</author>
            </item>
        
    
  </channel>
</rss>
